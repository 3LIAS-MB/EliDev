* {
/*------------------------------------PROPIEDADES DE TEXTO----------------------------------------*/

/*font-family(font-femuly)= Familia tipográfica
/ cursive(cursuvf)= cursiva*/
font-family: 'Lobster', cursive; 
/* Al establecer inherit como valor de font-family, el elemento actual tomará la misma fuente que su elemento contenedor.*/
font-family: inherit;


font-weight: normal; /*Establece el grosor de la fuente a su valor normal. Es el valor predeterminado si no se especifica ningún otro valor -> 400.*/
font-weight: bold; /*Aplica un grosor más grueso a la fuente. Es más oscuro que el grosor normal -> 600*/
font-weight: lighter; /* Hace que la fuente sea aún más gruesa que el valor bold, si está disponible en la fuente. Si no está disponible, se usará el valor bold.*/
font-weight: 100px; /*grosor de la letra // font-weight(font wueit)= peso de fuente// weight= el peso*/
font-size: 30px; /*tamaño de la fuente // font-size(font saiz)= tamaño de fuente // size(zais)= tamaño de fuente*/

font-style: normal; /*El texto se muestra en estilo normal, sin cursiva ni oblicua.*/
font-style: italic; /*El texto se muestra en cursiva.*/
font-style: oblique; /* Este valor también muestra el texto en un estilo oblicuo, similar a la cursiva.*/

font-stretch: normal; /*inutil?*/ 
font-variant: small-caps; /*inutil?*/
font-kerning: small-caps; /*Controla el espaciado entre caracteres (kerning).*/
/*-------------------------------------------------*/
/*La propiedad CSS line-height se utiliza para controlar la altura de línea dentro de un elemento HTML que contiene texto. Define la distancia vertical entre las líneas de texto en un bloque -> modifica el CONTENT*/

line-height: 24px; /*el espacio que ocupa arriba y abajo (1 es por defecto)*/  
/*-------------------------------------------------*/
/*La propiedad text-align se utiliza para controlar la alineación horizontal del contenido de texto dentro de un elemento HTML. Puedes aplicar esta propiedad a elementos como párrafos (<p>), encabezados (<h1>, <h2>, etc.), divs u otros elementos que contengan texto.*/

text-align: left; /*Alinea el texto a la izquierda*/
text-align: center; /*Alinea el texto en el centro*/
text-align: right; /*Alinea el texto a la derecha */
text-align: justify; /*Justifica el texto -> lo alinea en la pagina*/

text-indent: 15px; /*Controla la sangría de la primera línea de un bloque de texto.*/
/*++++++++++++++++++++*/
/*La propiedad CSS text-transform se utiliza para controlar cómo se transforma el caso del texto dentro de un elemento HTML.
Esta propiedad te permite aplicar transformaciones a las letras de un texto, como convertirlo todo en mayúsculas, minúsculas o capitalizar la primera letra de cada palabra.*/

text-transform: none; /*No se aplica ninguna transformación al texto*/
text-transform: uppercase; /*Transforma todo el texto a mayúsculas*/
text-transform: lowercase; /*Transforma todo el texto a minúsculas*/
text-transform: capitalize; /*Capitaliza la primera letra de cada palabra*/
/*++++++++++++++++++++*/
/*La propiedad CSS text-decoration se utiliza para controlar la decoración del texto, lo que incluye efectos visuales como subrayado, tachado, líneas sobre y líneas a través del texto. Esta propiedad te permite aplicar o quitar estas decoraciones para resaltar o estilizar el contenido textual.*/

text-decoration: none; /*No se aplica ninguna decoración al texto*/
text-decoration: underline; /*Agrega una línea de subrayado al texto*/
text-decoration: line-through; /*Agrega una línea a través del texto*/
text-decoration: underline line-through; /*Agrega tanto una línea de subrayado como una línea a través del texto*/

/**/
word-spacing: 10px; /*Espacio entre cada palabra*/
letter-spacing: 5px; /*Espacio entre cada letra*/










/*------------------------------------BOX MODEL - MODELO DE CAJA------------------------------------------*/
width: 100px;
    width: min-content;
    width: max-content;
    /*Es para que el elemento hijo herede
    la anchura del elemento padre.*/
    width: inherit;
/*++++++++++++++++++++*/
height: 100px;
    height: min-content;
    height: max-content;
    /*Es para que el elemento hijo herede
    la altura del elemento padre.*/
    height: inherit; 
/*************************************/

/*Margen (Margin):Es un espacio transparente fuera del borde del elemento. Los márgenes se utilizan para crear espaciado entre elementos.Se puede establecer mediante propiedades como margin-top, margin-right, margin-bottom y margin-left*/

/*la distancia que separa una caja de la otra: en vez de separar el texto del borde de la caja (eso hace el padding) nos separa la caja del resto de las cajas // margin(maryen)= margen*/
margin: 10px;
    margin: auto;
    margin-top: 15px;
    margin-bottom: 15px;
    margin-left: 15px;
    margin-right: 15px;
    /*Cuando trabajamos con elementos que son bloques de esta forma los centramos
    Es un calculo automatico que hace el navegador*/
    /*++++++++++++++++++++*/
    /*Establece un ancho máximo de 10 píxeles para la caja*/
    max-width: 10px; 
    /*Establece la altura máxima de la caja en 10 píxeles*/
    max-height: 10px; 
    /*Establece la altura mínima del elemento en el 70% de la altura del viewport */
    min-height: 70vh; 
    min-width: 10px;

/*************************************/
/*Relleno (Padding): Es un espacio transparente alrededor del contenido, entre el contenido y el borde.
Se puede establecer mediante propiedades como padding-top, padding-right, padding-bottom y padding-left.*/

padding: 25px; /*GENERAL*/
padding: 20px 30px; /*Top y botton de 20px; Right y left de 30px*/
padding: 5px, 10px, 15px, 20px; /*Top, right, bottom, left*/

padding-top: 5px;
padding-right: 10px;
padding-bottom: 15px;
padding-left: 20px;

/*************************************/
/*Borde (Border): Es una línea que rodea el contenido y el relleno. Se puede establecer
mediante propiedades como border-width, border-style y border-color.*/

/*CADA FUNCION POR SEPARADA. Si no le asignamos un color toma el color del texto*/
border-color: red;
border-width: 15px;
border-style:  solid;

border: none;
/*++++++++++++++++++++*/
/*ASIGNA UN BORDE A TODOS LOS LADOS, MAS FACIL K TODO XD*/
border: 10px solid red; 
border-top: 10px dashed red;
border-right: 10px double green;

border-bottom: 10px inset pink;
border-bottom: 10px outset pink; /*Lo mismo pero invertido*/

border-left: 10px groove orange;
border-left: 10px ridge orange; /*Lo mismo pero invertido*/
/*++++++++++++++++++++*/
/*Si especificamos la direccion (top, en este caso) solo se modifica esa parte*/
border-top-color: red;
border-top-width: 15px;
border-top-style: solid;
/*++++++++++++++++++++*/
/*PONER BORDES REDONDEADOS*/
border-radius: 10px; /*colocar esquina redondeada de forma general*/
border-radius: 20px 0px 10px 7px; /*Es para poner esquinas redondeadas, un solo valor es para todos los lados*/
/*++++++++++++++++++++*/
/*PONER BORDE REDONDEADO EN UNA ESQUINA ESPECIFICA*/
border-top-left-radius: 50px; /*forma indivudual*/
border-top-right-radius: 10px; /*forma individual*/
border-bottom-left-radius: 10px; /*forma individual*/
border-bottom-right-radius:10px; /*forma individual*/
/*++++++++++++++++++++*/
/*ME LO QUEDO POR LAS PALABRAS CLAVES NOMAS XD*/
border-width: 10px 5px 3px 2px; /*un solo valor equivale para todos los lados: */
border-width: thin; /*es el valor más pequeño que recibe el borde*/
border-width: medium; /*valor medio*/
border-width: thick; /*valor grande*/

/*diferentes colores en top, right, bottom, left. Se puede usar rgb, hex, etc*/
border-color: crimson hotpink gold lime; 

/*************************************/
/*content-box es el modelo de caja predeterminado en CSS. El ancho y la altura especificados se aplican al contenido del elemento, y cualquier relleno, borde o margen añadido aumenta el tamaño total del elemento.*/
box-sizing: content-box; 

/*NO deja que el alto y ancho sea mayor al valor especificado en la caja. Este incluye para su tamaño el contenido, el padding (relleno) y el borde exterior, pero excluyendo el margen. Todo se ajusta en consecuencia. */
box-sizing: border-box; 












/*---------------------------------------SOMBRAS-------------------------------------------*/
/*Agrega sombra al texto para crear efectos visuales -> para darle más intensidad después de la coma repetimos.
 eje x, eje y, difuminado, color*/
text-shadow: 2px 2px 7px #fff, 2px 2px 7px #fff;
/*eje x, eje y, tamaño del desenfoque, cuando borde va a tener (generalmente 0) y el color*/
box-shadow: 2px 4px 15px 0 #000;

/*++++++++++++++++++++*/
/*Para rotar el contenido -> transform(transform): transformar; rotate(routeih): rotar*/ 
transform: rotate(-45deg);
/*Se utiliza para mover un elemento horizontal y verticalmente en relación con su posición original.*/
transform: translate(-50%,-50%);













/*---------------------------------PROPIEDADES DE FONDO Y COLOR---------------------------------------------*/
/*background-color: purple; /*Fondo de color purpura*/
background: purple; /*Fondo de color purpura*/
background-color: purple;
/*++++++++++++++++++++*/

/*Crea un gradiente lineal entre dos o más colores, y opcionalmente puedes especificar un ángulo de dirección para el gradiente.*/
background: linear-gradient(to top right, #43389F 0%, #4ec6ca 100%); 
/*++++++++++++++++++++*/

background-image: url("img/patron2.jpg") repeat-x; /*Agregar una imagen de fondo -> repeat-x define como se repite o extiendo la imagen de fondo*/
background-image: url("img/patron2.jpg") center-top; /*Agregar una imagen de fondo -> "center-top" define la posicion de la imgen de fondo*/
background: color url('imagen.jpg') center top; /*Combina varios valores para definir color de fondo, imagen de fondo y posición.*/
/*++++++++++++++++++++*/
/*la propiedad CSS background-repeat se utiliza para controlar cómo se repite una imagen de fondo dentro de un elemento HTML. Cuando aplicas una imagen de fondo a un elemento, esta propiedad determina si la imagen se repite en el fondo y, en caso afirmativo, cómo se realiza la repetición.*/

background-repeat: repeat; /*La imagen de fondo se repite tanto horizontal como verticalmente. Este es el valor predeterminado si no se especifica ningún otro valor.*/
background-repeat: repeat-x; /*La imagen de fondo se repite solo verticalmente.*/
background-repeat: repeat-y; /*La imagen de fondo se repite solo horizontalmente.*/
background-repeat: no-repeat; /*El fondo no se repite*/
/*++++++++++++++++++++*/
/*La propiedad background-size es especialmente útil cuando deseas controlar cómo se adapta una imagen de fondo a un elemento específico. Puedes usarla para crear efectos visuales, ajustar la relación de aspecto y mejorar la apariencia general de la imagen de fondo en tu diseño web.*/

background-size: auto; /*Tamaño de la imagen de fondo en sus dimensiones originales*/
background-size: cover; /* La imagen de fondo cubre completamente el área */
background-size: contain; /* La imagen de fondo se ajusta dentro del área sin recortar */
background-size: 300px 200px; /* Tamaño de la imagen de fondo con dimensiones específicas */
background-size: 100%; /*El fondo ocupa el 100% de la pantalla*/
/*++++++++++++++++++++*/
/*La propiedad CSS background-attachment se utiliza para controlar si una imagen de fondo se desplaza junto con el contenido de la página o se mantiene fija en su posición mientras el contenido se desplaza.
Esta propiedad afecta a la relación entre la imagen de fondo y la ventana gráfica de visualización del usuario*/

background-attachment: scroll; /*La imagen de fondo se desplaza con el contenido*/
background-attachment: fixed; /*La imagen de fondo se mantiene fija en su posición*/
background-attachment: local; /*La imagen de fondo se desplaza con el scroll interno del elemento*/
/*++++++++++++++++++++*/
/*La propiedad CSS background-position se utiliza para controlar la posición inicial de una imagen de fondo dentro de un elemento HTML. Te permite especificar la ubicación donde la imagen de fondo se mostrará inicialmente en relación con el elemento que la contiene.*/

background-position: left top; /*La imagen de fondo se coloca en la esquina superior izquierda */
background-position: center center; /*La imagen de fondo se centra horizontal y verticalmente */
background-position: right bottom; /* La imagen de fondo se coloca en la esquina inferior derecha */
background-position: center bottom; /*Posicioana la imagen en el centro horizontal y en la parte inferior vertical*/

background-position: 50% 25%; /* La imagen de fondo se coloca en el 50% de la anchura y el 25% de la altura */

background-position-x: right; /*Coloca el elemento a la derecha del eje-x*/
background-position-y: left; /**/





















/*------------------------------------PROPIEDADES DE POSICIONAMIENTO----------------------------------------------*/
/*Se utiliza para especificar cómo se posiciona un elemento en el documento. Esta propiedad es fundamental para controlar el layout (disposición) de los elementos en una página, permitiendo ubicarlos exactamente donde se desee, ya sea en relación a su posición normal en el flujo del documento, en relación a su contenedor más cercano con posición no estática, o incluso fijos en relación con el viewport (ventana gráfica). La propiedad position puede tomar varios valores, cada uno con su propio conjunto de reglas sobre cómo se posicionará el elemento:*/

/*(valor predeterminado): El elemento se coloca en su posisción normal dentro del flujo del documento. No se ve afectado por las propiedades de posicionamiento.*/
position: static;

/*El elemento se posiciona de manera absoluta en relación con su primer ancestro posicionado. Si no hay un ancestro posicionado, se posicionará en relación con el cuerpo del documento (body). A demás en ancho y largo del contenedor se va a ajustar a si mismo almenos que se le de un height o width*/
position: absolute; 
/*El elemento se posiciona de manera relativa a su posición normal. Puedes usar las propiedades top, right, bottom y left para desplazarlo desde su posición original*/
position: relative;
/*Un elemento con position: fixed se posiciona en relación con la ventana gráfica (viewport) y permanece fijo en esa posición incluso cuando se realiza un desplazamiento (scroll) en la página. Igual que "absolute" se posiciona.*/
position: fixed;
  

/*Estas propiedades tienen efecto en los elementos a los que 
se les haya establecido una posicion, en cualquiera menos static*/

top: 50px; /*prioridad*/
right: 50px; /*prioridad*/
bottom: -50px;
left: -50px;

/*Lo mismo ocurre con z-index, solo no funciona con 'position: static;'. Lo que hace z-index es darle prioridad a los contenedores dependiendo del numero que lleven, para asi poder sobreeponerlos encima del otro*/
z-index: 50;
z-index: 100;
z-index: 150;

/*Para que contenedor padre se pueda sobreponer encima de su
contenedor hijo, este no debe tener z-index y el hijo lo debe tener en -1 */

/*--------------------------DISPLAY-----------------------------------------------*/
/*Combina las características de los elementos block e inline.
El elemento se comporta como una parte de línea de texto, pero
también permite controlar su ancho y alto, así como aplicar márgenes y rellenos.*/
display: inline-block; 
/*Hace que el elemento se comporte como un bloque y ocupe
todo el ancho disponible. Los elementos block normalmente
comienzan en una nueva línea y se apilan verticalmente.*/
display: block;
/*Hace que el elemento se comporte como una parte de
línea de texto. Los elementos inline no generan saltos
de línea y solo ocupan el espacio necesario para su contenido.*/
display: inline; 
/*Hace que el elemento no se muestre en absoluto. El espacio que ocuparía
se elimina del diseño y otros elementos se ajustan en consecuencia.*/
display: none; 
/*-------------------------------OVERFLOW----------------------------------------------*/

/* La propiedad CSS overflow controla cómo se maneja el contenido que desborda el área de un elemento con un tamaño fijo. Es útil cuando tienes contenido que es más grande que el contenedor que lo contiene. */

/*El contenido que desborda el contenedor se muestra fuera del contenedor (predeterminado).*/
overflow: visible; 
/*En caso de que el contenido sobrepaso la caja, nos da la posibilidad de que podas scrolear dentro de ella*/
overflow: auto; 
/*Obligatoriamente pone la barra de scroll (no como auto, que solo te muestra si es necesario)*/
overflow: scroll; 
/*Cualquier contenido que se desborde del contenedor será ocultado, es decir, no será visible para el usuario. El contenido que exceda los límites del contenedor será recortado y no se mostrará en la pantalla.(lo uso con flex-shrink: 0)*/
overflow: hidden; 

/*Overflow es un shorthand*/
overflow-y: visible;
overflow-x: visible;


/*---------------------------------PROPIEDADES TRANSICIÓN---------------------------------------------*/
/*Es una propiedad que nos ayuda a cambiar la velocidad
en las que ocurre las transciciones principalmente en el hover*/

transition: background 1s, heigth .2s, width .1s; 

/*Pone todo con una transicion de 1sg
-> Dalto no lo recomienda*/
transition: all 1s;
transition: all 1s, border 0.5s; /*Todo en 1s menos border, puede ser con cualquie otra propiedad tambien*/


/*-------------------------------------------FLOAT---------------------------------------------*/
/*La propiedad CSS float se utiliza para controlar la alineación horizontal de elementos dentro de un contenedor. Es comúnmente utilizada para crear diseños de columnas o para colocar elementos uno al lado del otro. float tiene dos valores principales: left y right.*/

/*float: left;
float: right;

float: none;
float: inherit;*/

/*-----------------------------PSEUDOELEMENTOS -> INTERACCION CON LOS COLORES DE TEXTO--------------*/
/*CAMBIA TODA LA PRIMERA LINEA DE TEXTO -> FORMA PARTE DEL DOOM*/
/*FUNCIONA CON TODOS LOS DISPLAY MENOS CON EL INLINE*/
.hola::first-line  {  
    color: blue;
} 
/*CAMBIA LA PRIMERA LETRA -> FORMAN PARTE DEL DOOM*/
/*FUNCIONA CON TODOS LOS DISPLAY MENOS CON EL INLINE*/
::first-letter { 
    color: blue;
}
/*++++++++++++++++++++*/
/*SIRVE PARA CAMBIAR EL ESTILO DEL PLACEHOLDER*/
input::placeholder {
    color: red;
    font-size: 20px;
}
/*++++++++++++++++++++*/
/*TE DEJA ELEGIR EL COLOR AL SELECCIONAR UN ELEMENTO O TEXTO -> EL POR DEFECTO ES EL AZUL*/
p::selection {
    color: aqua;
    background-color: yellow;
}
/*++++++++++++++++++++*/
/*Los pseudoelementos que requieren de la etiqueta CONTENT no forman parte del DOM*/
/*HIJOS - CONTENT (NECESARIO) - INLINE
-> no se puede seleccionar
-> funciona en elementos en linea y en bloque*/
b::after { 
    content: "Me suscribi a"
}
/*HIJOS - CONTENT (NECESARIO) - INLINE -> NO FORMAN PARTE DEL DOM
-> no se puede seleccionar
-> funciona en elementos en linea y en bloque*/
b::before {
    content: "Todo tendencia"
}

/*----------------------------------PSEUDOCLASES---------------------------------*/
/*PSEUDO CLASES SON ELEMENTOS EN LINEA, PERO SE LOS PUEDE CAMBIAR -> QUEDA RE PIOLA CON TRANSISICION (transition)*/

/*Funciona en cualquier elemento, menos en los pseudoelementos*/
.caja1:hover { 
    background-color: darkslateblue;
    color: darkslateblue;
    height: 200px;
    width: 200px;
    border-color: blue;
    /*transition: all 1s, border 0.5; -> esto deberia estar del otro lado*/
}

/*Cambia de color a los enlaces, si todavia
no lo visité se queda en rojo, por ejemplo*/
.caja1:link { 
    background-color: black;
    color: red;
}

/*Todos los links que ya visite se ponen de color violeta.
Esta por encima de una clase pero por debajo de un ID*/
.caja1:visited { 
    background-color: aliceblue;
    color: violet;
}

/*Selecciona un elemento cuando está siendo activado (haciendo clic o manteniendo presionado).
-> Cambiar estilos momentáneamente para indicar que un botón o enlace está siendo presionado.*/
.caja1:active { 
    background-color: red;
    width: 200px;
}

/*Cuando el elemento esta seleccionado cambia a lo
que esta adentro de focus, se usa mucho en los inputs*/
.caja1:focus  { 
    background-color: white;
    padding: 20px;
    /*transition: background 0.4s, padding 0.4s;*/

    /*Dibujar un contorno alrededor de un elemento, que es visualmente similar a un borde pero no afecta el layout o la posición del elemento. A diferencia de border, el outline no ocupa espacio adicional fuera del elemento; se dibuja sobre el contenido y puede solaparse con otros elementos adyacentes o cercanos.*/
    outline: 2px solid red; /*ancho, estilo color;*/
}





/*La pseudoclase :focus-visible en CSS se utiliza para aplicar estilos a un elemento cuando está enfocado, pero solo si el enfoque es visible para el usuario. Esto es especialmente útil para mejorar la accesibilidad y la usabilidad en sitios web.*/
.caja1:focus-visible {
    background-color: white;
}

/*A cualquier elemento que este en español aplica estos elementos
(tiene que estar espeficicado en su etiqueta html "lang="es"*/
.caja1:lang(es) { 
    background-color: red;
}


/*----------------------------------OBJECT-FIT -> MULTIMEDIA Y VIDEOS---------------------------------*/
.caja {
    /*Hace que el contenido se ajuste dentro de la caja manteniendo sus proporciones originales. El contenido puede quedar rodeado por espacios vacíos si la relación de aspecto de la caja no coincide con la relación de aspecto del contenido..*/ 
    object-fit: contain;
    /*Hace que el contenido cubra completamente la caja manteniendo sus proporciones originales. Puede recortar parte del contenido si la relación de aspecto de la caja no coincide con la relación de aspecto del contenido.*/
    object-fit: cover;
    /*Hace que el contenido se ajuste dentro de la caja sin mantener las proporciones originales. Puede distorsionar el contenido si la relación de aspecto de la caja no coincide con la relación de aspecto del contenido.*/
    object-fit: none; 
     /*Hace que el contenido se ajuste dentro de la caja manteniendo sus proporciones originales, pero elige CONTAIN o NONE según cuál resulte en un menor escalado del contenido.  No distorsiona el contenido y evita espacios vacíos innecesarios.*/
    object-fit: Scale-Down;
}

/*----------------------------------OBJECT-POSITION -> MULTIMEDIA Y VIDEOS---------------------------------*/

.caja {
    object-position: left;
    object-position: right;
    object-position: top;
    object-position: bottom;
    object-position: -4em; /*PX - EM - % - ETC*/
}

/*---------------------------------------CURSOR---------------------------------------------------------*/
/*CAMBIAR EL CURSOR*/
.caja {
    cursor: pointer;
    cursor: progress;
    cursor: copy;

    /*HAY UNA PAGINA PARA ELEGIR CURSORES
    "Lista de valores de cursos css*/
}
/*SE PUEDE ELEGIR CURSOR DENTRO DE UN NAV*/
.caja:active {
    cursor: row-resize;
}

.caja {
    background-color: rgb(0, 0, 0); /*RGB -> RED, GREEN, BLUE*/
    background: rgba(150,150,150,0.5); /*RED, GREE, BLUE, ALPHA -> EL CUARTO PARAMETRO ES LA OPACIDAD QUE VA DEL 0 AL 1*/
    background: #fff; /*EL CUARTO PARAMETRO ES LA OPACIDAD*/
}
/*-------------------------------ESTRUCTURA RESPONSIVE------------------------------------------------*/

/*RESPONSIVE DESIGN - Mobile first*/

@media only screen and (max-width: 500px) {
    .nav__ul {
        display: none;
    }
    .nav__responsive-ul {
        display: block;
    }
}

/*<meta name="viewport" content="width=device-width, initial-scale=1.0">*/




























/*------------------FLEX-BOX -> ESTAS PROPIEDADES SE APLICAN AL CONTENEDOR------------------------------*/
/*Flexbox, o Flexible Box Layout, es un modelo de diseño en CSS que proporciona una manera eficiente de diseñar y organizar elementos en una interfaz de usuario, especialmente cuando se trata de diseño en una sola dimensión, ya sea fila o columna. El objetivo principal de Flexbox es ofrecer una manera más eficiente y predecible de distribuir el espacio entre los elementos y alinearlos de manera flexible, sin importar su tamaño o la cantidad de contenido.*/

/*Para utilizar Flexbox, primero, debes convertir un elemento contenedor en un contenedor flexible, lo que permite 
controlar la disposición y alineación de sus elementos secundarios utilizando las propiedades Flexbox.*/

display: flex; 

/*Establece el elemento como un contenedor de cuadrícula, lo que permite crear diseños bidimensionales más avanzados utilizando las propiedades Grid.*/
display: grid; 

/*--------------------**********++++++++++PROPIEDADES DE CONTAINER+++++++++************----------------------*/
/*+++++++++++++FLEX-DIRECTION++++++++++++++++++*/
/*La propiedad CSS flex-direction se utiliza en contenedores flexibles (elementos con display: flex o display: inline-flex) para controlar la dirección en la que los elementos secundarios (hijos) se colocan dentro del contenedor y la dirección en la que se distribuyen a lo largo del eje principal.*/

.flex-direction {
    /*Por defecto. Elementos secundarios en una sola línea horizontal*/
    flex-direction: row;

    /*Elementos secundarios en una sola línea horizontal en orden inverso*/
    flex-direction: row-reverse; 
    /*Elementos secundarios en una sola columna vertical*/
    flex-direction: column; 
    /*Elementos secundarios en una sola columna vertical en orden inverso*/
    flex-direction: column-reverse; 
}

/*+++++++++++++FLEX-WRAP++++++++++++++++++*/
/*La propiedad CSS flex-wrap se utiliza en combinación con contenedores flexibles (elementos con display: flex o display: inline-flex) para controlar si los elementos secundarios (hijos) deben ajustarse en una sola línea o si se pueden dividir en varias líneas cuando no haya suficiente espacio horizontal.*/

.flex-wrap {
    /*(valor predeterminado): Los elementos secundarios se ajustarán en una sola línea, lo que puede causar que se reduzcan en tamaño o se desborden del contenedor padre si no hay suficiente espacio horizontal.*/
    flex-wrap: nowrap; 
    /*Los elementos secundarios se ajustarán en varias líneas si no hay suficiente espacio horizontal. Cada línea contendrá tantos elementos como sea posible antes de pasar a la siguiente línea.*/
    flex-wrap: wrap; 
    /*Similar a wrap, pero los elementos secundarios se ajustarán en varias líneas en orden inverso, es decir, comenzando desde la última línea y moviéndose hacia arriba.*/
    flex-wrap: wrap-reverse; 
}
/*+++++++++++++FLEX-FLOW++++++++++++++++++*/
/*FLEX-FLOW REEMPLAZA A FLEX-DIRECTION Y FLEX-WRAP,
SE LOS PUEDE ESCRBIIR EN UNA SOLA LINEA DE CODIGO*/
.flex-flow {
    flex-flow: column wrap;
}

/*----------------------------JUSTIFY-CONTENT -> EJE HORIZONTAL---------------------------------------*/
/*La propiedad CSS justify-content se utiliza en contenedores flexibles (elementos con display: flex o display: inline-flex) para controlar cómo se distribuyen y alinean los elementos secundarios (hijos) a lo largo del eje principal (horizontal) del contenedor.*/

/*TODOS LLEVAN "display: flex;"*/

.justify-content {
    /*Se ubica al principio de la caja que la contiene
    -> Elementos secundarios alineados al inicio del contenedor*/
    justify-content: flex-start; 
    /*Se ubica al final de la caja que la contiene
    -> Elementos secundarios alineados al final del contenedor*/
    justify-content: flex-end; 
    /*Se ubica al centro de la caja que la contiene
    -> Elementos secundarios alineados en el centro del contenedor*/
    justify-content: center; 
    
    /*No deja margen en los extremos de los contendedores,
    es decir, estan pegados a la pared*/
    justify-content: space-between; 
    /*Deja el MISMO margen de distancia entre los contenedores*/
    justify-content: space-evenly; 
    /*Deja un espacio igual al principio y al final pero en los contenedores
    del medio no porque los pespacios que tienen se suman y crean desproporcion*/
    justify-content: space-around; 
}

/*NOTA: SI LE PONEMOS UN "FLEX-DIRECTIOM: COLUM;" TODO ES AL REVES XDDD*/

/*--------------------------------ALIGN ITEMS -> EJE VERTICAL-----------------------------------------*/
/*La propiedad CSS align-items se utiliza en contenedores flexibles (elementos con display: flex o display: inline-flex) para controlar cómo se alinean los elementos secundarios (hijos) a lo largo del eje secundario (vertical) del contenedor.*/

/*TODOS LLEVAN  "display: flex; -> "*/

.align-items {
    /*PROPIEDAD POR DEFECTO: Los elementos secundarios se estiran para ocupar todo
    el espacio disponible a lo largo del eje secundario, lo que puede igualar sus alturas.*/
    align-items: stretch; 

    /*Los elementos secundarios se alinean en la parte superior del contenedor a lo largo
    del  eje secundario (vertical) -> e impide que se estiren a lo largo del cross axis. */
    align-items: flex-start; 
    /*Los elementos secundarios se alinean en la parte inferior 
    del contenedor a lo largo del eje secundario (vertical).*/
    align-items: flex-end; 
    /*Los elementos secundarios se alinean en el centro del
    contenedor a lo largo del eje secundario (vertical).*/
    align-items: center; 

    /*Dalto dice que se usa con wrap-reverse para dar un efecto -> averiguar*/
    align-items: baseline; 
}
/*NOTA: SI LE PONEMOS UN "FLEX-DIRECTIOM: COLUM;" TODO ES AL REVES XDDD*/
/*Los elementos secundarios se alinean en el centro del contenedor a lo largo del eje secundario (vertical).*/
/*+++++++++++++++++++++++++++++++*/
.align-content {
    /*Se cuando hay más de una linea de items que son flex-items*/
    align-content: flex-start;
    align-content: flex-end;
    align-content: center;

    align-content: space-between;
    align-content: space-evenly;
    align-content: space-around;

    align-content: stretch;
}

/*------------**************+++++++++PROPIEDADES DE LOS ITEMS++++++++************-----------------------------*/
/*la propiedad CSS align-self se utiliza para controlar la alineación vertical de elementos individuales (hijos) dentro de un contenedor flexible (elemento con display: flex o display: inline-flex). A diferencia de align-items, que se aplica al contenedor para alinear todos los elementos secundarios, align-self se aplica a un elemento secundario específico para cambiar su alineación vertical en relación con los demás elementos secundarios.*/

/*TODOS LLEVAN "display: flex;"*/

.align-self {
    align-self: flex-start; /*El elemento se alinea en la parte superior del contenedor a lo largo del eje secundario.*/
    align-self: flex-end; /*El elemento se alinea en la parte inferior del contenedor a lo largo del eje secundario.*/
    align-self: center; /*El elemento se alinea en el centro del contenedor a lo largo del eje secundario.*/

    align-self: auto; /*(valor predeterminado): Utiliza la alineación definida por el contenedor.*/
    align-self: stretch; /*El elemento se estira para ocupar todo el espacio disponible a lo largo del eje secundario.*/
    align-self: baseline; /*El elemento se alinea en la línea base del texto del contenedor a lo largo del eje secundario*/
}
/*------------------------------------------------------------------------------------------------------------------*/
/*+++++++++++++FLEX-GROW++++++++++++++++++*/
/*La propiedad flex-grow es utilizada para controlar la capacidad de expansión de un elemento flexible dentro de un contenedor flexible. Determina cómo se distribuirá el espacio adicional disponible en el contenedor entre los elementos flexibles.

La propiedad flex-grow acepta un valor numérico que representa el factor de crecimiento del elemento flexible. Este valor indica la proporción en la que un elemento debe crecer en relación con los demás elementos flexibles dentro del mismo contenedor. -> Valor predeterminado: flex-grow: 0;*/

.flex-grow {
    flex-grow: 1; /*1, 2, 3, 4, 5...*/
}
/*+++++++++++++FLEX-BASIS++++++++++++++++++*/
.flex-basis {
    /*FUNCIONA COMO WIDTH Y HEIGHT PERO EN ITEMS FLEXIBLES*/
    flex-basis: auto;
}
/*+++++++++++++FLEX-SHRINK++++++++++++++++++*/
.flex-shink {
    /*La propiedad CSS flex-shrink se utiliza en elementos secundarios (hijos) dentro de un contenedor flexible para controlar cómo se reducen en tamaño en relación con los demás elementos secundarios cuando no hay suficiente espacio disponible en el contenedor

    -> Nos permite elegir que caja va a ceder más espacio cuando no alcance el lugar disponible*/

    flex-shrink: 0; /*No se reducirán en absoluto y mantendrán su tamaño original*/
    flex-shrink: 1; /*Los elementos se reducirán igualmente -> valor por defecto*/
    flex-shrink: 2; /*Este elemento se reducirá más que los demás*/
}
/*+++++++++++++FLEX es un shorthand++++++++++++++++++*/
/*flex-grow, flex-shrink, flex-basis
-> almenos se debe pasar un parametro*/
.flex {
    flex: 1 0 350px;
    flex: 1;
}
/*------------------------------------------------------------------------------------------------------------------*/
/*La propiedad order en CSS se utiliza en el contexto de Flexbox o Grid para especificar el orden visual de un elemento en relación con los demás elementos hijos del mismo contenedor flexible o de cuadrícula. Esta propiedad permite alterar el orden en el que los elementos son mostrados sin modificar el orden del marcado HTML*/
order: 1;
order: 10;
order: 15;

























/*---------------Gird > CONCEPTOS BASICOS ------------------------

_Grid Container
_Grid Item
_Grid Cell
_Grid Tracks (Column y Row)
_Grid Area
_Grid Line (Column y Row)

--------PROPIEDADES------------
grid-template-rows (Gird-container)
grid-template-columns (Gird-container)

->  unidades "auto" y fr repeat(cantidad, tamaño/s)

grid-row-gap (grid-container)
grid-column-gap (grid-container)
grid-gap: row column (grid-container)

Tird-row-start (grid-item)
grid-row-end (grid-item) |
grid-column-start (grid-item)
grid-column-end
(grid-item)
grid-row (grid-item)
grid-column (grid-item)

------GIRD IMPLÍCITO Y EXPLÍCITO-------
3 nuevas propiedades del grid implicito
grid-auto-rows (Igual que el template)
grid-auto-columns (Igual que el template)
grid-auto-flow: Row (Default), Column y Dense*

---------------GRID DINÁMICO------------------
minnax()
min-content
max-content
cantidad:
auto-fill
auto-fit

--------ALINEACIÓN Y CONTROL DE FLUJO-----------
diferencia con flex:
_la alineación es dentro de cada celda y no
alineación total del flex container
_cada celda sería un "flex container"

---(Propiedades del grid-container)----

justify-items (horizontalmente)
align-items (verticalmente)

stretch(default) - start - center - end

place-items: align-items justify-items


----------alineación de filas y columnas-------------
_justify-content (horizontalmente)
align-content (verticalmente)
_stretch(default) - start - center - end
mas las de flex:
"space-arround
*space-between
*space-evenly

--------------APLICADO AL grid ITEM-----------------
_align-self
_justify-self

_place-self: align-self justify-self

Stretch(default) - start - center - end

_order (igual que en flex)

---------------AREAS EN GRID-----------------
_Al GRID CONTAINER_
grid-template-areas: "nombre/s de area/s*;

Al GRID ITEM_
grid-area: "nombre del area"

------------NOMBRES A LAS LINEAS---------------
[line-name]
se puede reemplazar en: GRID-ROW | GRID-COLUMN

---------------SHORTHAND-----------------------
_Grid-template: row / columns|[ (Grid-container)
_Grid-template: area unidad

-> grid;
/*--------------------------------------------------------------------------------------------------------/


/*Son propiedades que se utilizan para definir el tamaño y la disposición de las filas y columnas en una cuadrícula.*/
.contenedor {
    display: grid;
    grid-template-rows: 50% 100px auto 10vw;
    /*como minimo 100px y cuando sobrepase será un fr*/
    grid-template-columns: minmax(100px, 1fr) 2fr 3fr;
                                        
    /*'auto-fit' */
    /*grid-template-columns: repeat(3, 25px 50px);*/
    grid-template-columns: 10px repeat(auto-fit, minmax(100px, 1f)) 10px;
    
    /*'mincontent' establece el tamaño minimo de cada una de las celdas*/
    /*'max-content' establece el tamaño maximo de cada una de las celdas*/
    /*'auto-fill' rellena la cantidad de columnas que pueda que cumplan con estas propiedades*/
    grid-template-columns: 10px repeat(auto-fill, minmax(mincontent, max-content)) 10px;

    /* SHORTHAND */
    grid-template: repeat(3, 1fr);
    grid-template: 15% 15em auto / 1fr 2fr auto;



/*------------------------------------------------------------------------------------------------------------------*/  
/*La propiedad grid-gap en CSS se utiliza para establecer el espacio entre las filas y columnas en una cuadrícula creada con display: grid. Es un atajo conveniente que combina grid-row-gap y grid-column-gap en una sola propiedad. -> similar a width?*/

    grid-column-gap: 10px;
    grid-row-gap: 10px;
    /*LO MISMO*/
    column-gap: 10px;
    row-gap: 10px;
    /* SHORTHAND*/
    grid-gap: 10px 20px; /*filas, columnas*/
    grid-gap: 10px; /*10px para ambos*/
    /*LO MISMO*/ 
    gap: 10px;
/*------------------------------------------------------------------------------------------------------------------*/
/*Las propiedades grid-column-start y grid-column-end en CSS Grid se utilizan para especificar la ubicación de inicio y finalización de un elemento en el eje de las columnas dentro de una cuadrícula.

grid-column-start: Define en qué línea de columna debe comenzar un elemento dentro de la cuadrícula.
grid-column-end: Define en qué línea de columna debe terminar un elemento dentro de la cuadrícula.*/

    grid-column-start: 1;
    grid-column-end: 3;
    
    grid-row-start: 1;
    grid-row-end: 3;

    /* SHORTHAND*/
    grid-column: 1 / 3;
    grid-row: 3 / span 5; /*    probar span mañana gg*/
/*------------------ELEMENTOS IMPLICITOS-----------------*/
/*
-> grid-auto-flow: Determina cómo se colocan automáticamente los elementos (implicitios) que no tienen una posición explícita definida por grid-column y grid-row. Puede tener los valores row, column, dense u otros*/

    grid-auto-flow: row;
    grid-auto-flow: column;
    grid-auto-flow: dense; /*Rellena los lugares vacios provacdos por el grid implicito*/
/*
-> grid-auto-rows: Define la altura predeterminada de las filas generadas automáticamente en la cuadrícula.*/
    grid-auto-rows: 150px;
/*-> grid-auto-columns: Define el ancho predeterminado de las columnas generadas automáticamente en la cuadrícula*/
    grid-auto-columns: 1fr;

/*Estas propiedades son útiles cuando tienes elementos en tu cuadrícula que no tienen una posición explícita y se deben colocar automáticamente. grid-auto-rows y grid-auto-columns establecen el tamaño predeterminado de las filas y columnas generadas automáticamente, y grid-auto-flow determina cómo se llenan esas celdas automáticas (ya sea en filas o columnas).*/

/*---------------hasta aca (implicitos)------------------------------------------------------------------*/

/*Se aplican a los elementos individuales dentro de la cuadrícula. Controla la alineación en el eje principal (justify-items) afectando a todos los elementos dentro de la cuadrícula..*/

    justify-items: start;
    justify-items: end;
    justify-items: center;

    /*Los elementos se estiran para llenar el
    espacio de la celda en el eje principal.*/
    justify-items: stretch; /*defecto*/

/*+++++++++++++++++++*/
/*Se aplican a los elementos individuales dentro de la cuadrícula. Controla en el eje transversal (align-items) afectando a todos los elementos dentro de la cuadrícula.*/

    align-items: start;
    align-items: end;
    align-items: center;

    /*Los elementos se estiran para llenar el
    espacio de la celda en el eje transversal.*/
    align-items: stretch;

/*SHORTHAND*/
    /*place-items: <align-items> <justify-items>;*/
    place-items: center stretch;

/*----------------------------*/ 
/*Se aplican al contenedor de la cuadrícula en sí, no a los elementos individuales.
Controla (justify-content) en el espacio disponible dentro del contenedor de la cuadrícula.*/

    justify-content: start;
    justify-content: end;
    justify-content: center;

    justify-content: space-around;
    justify-content: space-between;
    justify-content: space-evenly;

    justify-content: stretch;
/*++++++++*/
/*Se aplican al contenedor de la cuadrícula en sí, no a los elementos individuales. Controla cómo se
distribuyen las filas (align-content) en el espacio disponible dentro del contenedor de la cuadrícula.*/

    align-content: start;
    align-content: end;
    align-content: center;

    align-content: space-around;
    align-content: space-between;
    align-content: space-evenly;

    align-content: stretch;

/*-----------------------------------------*/ 
/*Las propiedades align-self y justify-self en CSS Grid se utilizan para controlar la alineación de un elemento específico dentro de una cuadrícula, anulando las propiedades align-items y justify-items que se aplican al contenedor de la cuadrícula.*/

    /*Controla la alineación del elemento en el eje transversal (vertical) dentro de su 
    celda en la cuadrícula. Puede tener los valores start, end, center, stretch, y otros.*/
    align-self: start;
    align-self: end;
    align-self: center;

    align-self: stretch;
/*++++++++*/
    /*Controla la alineación del elemento en el eje principal (horizontal) dentro de su celda 
    en la cuadrícula. Puede tener los valores start, end, center, stretch, y otros.*/
    justify-self: start;
    justify-self: end;
    justify-self: center;

    justify-self: stretch;

/*Reemplaza a align-self y justify-self.
-> Lo hace en una sola linea -> SHORTHAND*/

    /*align, justify*/
    place-self: end end; 
/*----------------------------*/
/*Funciona como en flex-box, es para intercambiar celdas de la cuadricula*/
    order: 1;

    /*Se le aplica al container*/
    grid-template-areas:
    "header header header"
    "aside main main"
    "aside main main"
    "aside main main"
    "aside main main"
    "footer footer fotter";

    /*Se le aplica a los hijos*/
    grid-area: header;
    grid-area: main;
    grid-area: aside;
    grid-area: footer;
}









































/*------------------------------------------SIN CATEGORIA----------------------------------------------------*/



/*------------*/
.sin-categoria {
    /*PARA QUITARLE AL TEXTAREA LA OPCION DE EXPANDIRSE*/
    resize: none;
    /*Quita los estilos de los ol y ul*/
    list-style: none; 
    /*Lo uso para alinear en el centro a la imagen*/
    vertical-align: middle; 
    /*La imagen se acomoda dentro de un ancho y alto especificado*/
    object-fit: cover;

    /* La propiedad user-select en CSS controla si un usuario puede seleccionar o no el contenido de un elemento utilizando el ratón o el teclado. Cuando se establece en none, impide que el usuario seleccione el contenido del elemento. */
    -webkit-user-select: antialiased;
    user-select: none;
    
    /*auto: Este es el valor predeterminado. Permite que el navegador determine si el
    contenido del elemento puede ser seleccionado por el usuario.

    text: Permite la selección de texto dentro del elemento. Esto es útil
    para la mayoría de los elementos de texto, como párrafos, encabezados, etc.

    all: Permite la selección de todo el contenido dentro del elemento, incluidos elementos
    que normalmente no se pueden seleccionar, como imágenes o elementos de formulario.

    none: Como mencionaste anteriormente, esto impide que el usuario
    seleccione cualquier parte del contenido dentro del elemento.

    inherit: Hereda el valor de user-select del elemento padre.

    element: Este valor es más específico y se usa para indicar que solo se puede seleccionar el contenido del elemento en sí, pero no su texto descendiente. Esto puede ser útil en casos donde deseas permitir la selección de elementos como botones, pero no su contenido interno.*/
}

    
/*-------------------------------------POPIEDADES DE VISUALIZACIÓN--------------------------------------------*/
.class { 
    /*Desde el intervalo [0, 1]
    Donde 1 es totalmente opaco*/
    opacity: 0; 
    opacity: 0.5; /*La mitad*/
}

}
/*=====================================TEORIA======================================================*/
/*"selección múltiple" o "selección de clase múltiple*/
.caja1, .caja2 {
    width: 200px ;
    height: 200px;
  }

/*-------------MEDIQUERIS-----------------*/

/*---------------------------------------*/
